// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: comet/comet.proto

package comet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CometClient is the client API for Comet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CometClient interface {
	// push by user keys
	SendToUserKeys(ctx context.Context, in *SendToUserKeysReq, opts ...grpc.CallOption) (*SendToUserKeysReply, error)
	// push by room's user
	SendToRoom(ctx context.Context, in *SendToRoomReq, opts ...grpc.CallOption) (*SendToRoomReply, error)
	// push by every user
	SendToAll(ctx context.Context, in *SendToAllReq, opts ...grpc.CallOption) (*SendToAllReply, error)
	// get all rooms
	GetAllRoomId(ctx context.Context, in *GetAllRoomIdReq, opts ...grpc.CallOption) (*GetAllRoomIdReply, error)
}

type cometClient struct {
	cc grpc.ClientConnInterface
}

func NewCometClient(cc grpc.ClientConnInterface) CometClient {
	return &cometClient{cc}
}

func (c *cometClient) SendToUserKeys(ctx context.Context, in *SendToUserKeysReq, opts ...grpc.CallOption) (*SendToUserKeysReply, error) {
	out := new(SendToUserKeysReply)
	err := c.cc.Invoke(ctx, "/imfun.comet.Comet/SendToUserKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cometClient) SendToRoom(ctx context.Context, in *SendToRoomReq, opts ...grpc.CallOption) (*SendToRoomReply, error) {
	out := new(SendToRoomReply)
	err := c.cc.Invoke(ctx, "/imfun.comet.Comet/SendToRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cometClient) SendToAll(ctx context.Context, in *SendToAllReq, opts ...grpc.CallOption) (*SendToAllReply, error) {
	out := new(SendToAllReply)
	err := c.cc.Invoke(ctx, "/imfun.comet.Comet/SendToAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cometClient) GetAllRoomId(ctx context.Context, in *GetAllRoomIdReq, opts ...grpc.CallOption) (*GetAllRoomIdReply, error) {
	out := new(GetAllRoomIdReply)
	err := c.cc.Invoke(ctx, "/imfun.comet.Comet/GetAllRoomId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CometServer is the server API for Comet service.
// All implementations must embed UnimplementedCometServer
// for forward compatibility
type CometServer interface {
	// push by user keys
	SendToUserKeys(context.Context, *SendToUserKeysReq) (*SendToUserKeysReply, error)
	// push by room's user
	SendToRoom(context.Context, *SendToRoomReq) (*SendToRoomReply, error)
	// push by every user
	SendToAll(context.Context, *SendToAllReq) (*SendToAllReply, error)
	// get all rooms
	GetAllRoomId(context.Context, *GetAllRoomIdReq) (*GetAllRoomIdReply, error)
	mustEmbedUnimplementedCometServer()
}

// UnimplementedCometServer must be embedded to have forward compatible implementations.
type UnimplementedCometServer struct {
}

func (UnimplementedCometServer) SendToUserKeys(context.Context, *SendToUserKeysReq) (*SendToUserKeysReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToUserKeys not implemented")
}
func (UnimplementedCometServer) SendToRoom(context.Context, *SendToRoomReq) (*SendToRoomReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToRoom not implemented")
}
func (UnimplementedCometServer) SendToAll(context.Context, *SendToAllReq) (*SendToAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToAll not implemented")
}
func (UnimplementedCometServer) GetAllRoomId(context.Context, *GetAllRoomIdReq) (*GetAllRoomIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRoomId not implemented")
}
func (UnimplementedCometServer) mustEmbedUnimplementedCometServer() {}

// UnsafeCometServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CometServer will
// result in compilation errors.
type UnsafeCometServer interface {
	mustEmbedUnimplementedCometServer()
}

func RegisterCometServer(s grpc.ServiceRegistrar, srv CometServer) {
	s.RegisterService(&Comet_ServiceDesc, srv)
}

func _Comet_SendToUserKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendToUserKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CometServer).SendToUserKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imfun.comet.Comet/SendToUserKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CometServer).SendToUserKeys(ctx, req.(*SendToUserKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comet_SendToRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendToRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CometServer).SendToRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imfun.comet.Comet/SendToRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CometServer).SendToRoom(ctx, req.(*SendToRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comet_SendToAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendToAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CometServer).SendToAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imfun.comet.Comet/SendToAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CometServer).SendToAll(ctx, req.(*SendToAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comet_GetAllRoomId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRoomIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CometServer).GetAllRoomId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imfun.comet.Comet/GetAllRoomId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CometServer).GetAllRoomId(ctx, req.(*GetAllRoomIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Comet_ServiceDesc is the grpc.ServiceDesc for Comet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Comet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imfun.comet.Comet",
	HandlerType: (*CometServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendToUserKeys",
			Handler:    _Comet_SendToUserKeys_Handler,
		},
		{
			MethodName: "SendToRoom",
			Handler:    _Comet_SendToRoom_Handler,
		},
		{
			MethodName: "SendToAll",
			Handler:    _Comet_SendToAll_Handler,
		},
		{
			MethodName: "GetAllRoomId",
			Handler:    _Comet_GetAllRoomId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comet/comet.proto",
}
