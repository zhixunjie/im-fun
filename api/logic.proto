syntax = "proto3";

package imfun.logic;

option go_package = "github.com/zhixunjie/im-fun/api/pb;pb";

import "protocol.proto";

service Logic {
  // 建立TCP连接，并且auth后，保存映射关系
  rpc Connect(ConnectReq) returns (ConnectResp);
  // 断开TCP连接，删除映射关系
  rpc Disconnect(DisconnectReq) returns (DisconnectResp);
  // Heartbeat
  rpc Heartbeat(HeartbeatReq) returns (HeartbeatResp);
  // RenewOnline
  rpc RenewOnline(OnlineReq) returns (OnlineResp);
  // Receive
  rpc Receive(ReceiveReq) returns (ReceiveResp);
  // ServerList
  rpc Nodes(NodesReq) returns (NodesResp);
}

message KafkaSendMsg {
  enum Type {
    ToUsers = 0;
    ToRoom = 1;
    ToAll = 2;
  }
  Type type = 1;
  int32 subId = 2;
  int32 speed = 3;
  string serverId = 4;
  string roomId = 5;
  repeated string tcpSessionIds = 6;
  bytes msg = 7;
}

// TCP连接的唯一标识
// 关系：
// - 一个 uniId 可以有多个 sessionId
// - 每个 session 对应一个 tcp 连接；每个 tcp 连接对应一个 serverId
message TcpConnection {
  string uniId = 1;     // 唯一ID（比如：用户ID）
  string sessionId = 2; // 会话ID
  string serverId = 3;  // 服务器实例ID（uuid）
}

// TCP连接的用户信息
message TcpUserInfo {
  TcpConnection connect = 1; // 唯一地标识一条TCP连接
  string roomId = 2;         // 房间ID
  Platform platform = 3;     // 客户端平台
  string clientIP = 4;       // 客户端的IP地址
  HbCfg hb_cfg = 5;          // 心跳配置
}

message AuthParams {
  string uniId = 1;       // 唯一ID（比如：用户ID）
  string token = 2;       // 鉴权token
  string roomId = 3;      // 房间ID
  Platform platform = 4;  // 客户端平台
}

// 建立TCP连接，并且auth后，保存映射关系
message ConnectReq {
  AuthParams authParams = 1; // 鉴权参数
  string serverId = 2;       // 服务器实例ID（uuid）
}

message ConnectResp {
  HbCfg hb_cfg = 1;
  string sessionId = 2;
}

message HbCfg {
  int64 interval = 1;   // 心跳间隔(s)
  int64 fail_count = 2; // 心跳失败次数
  int64 bind_expire = 3; // 绑定过期时间(s)
}

// 断开TCP连接，删除映射关系
message DisconnectReq {
  TcpConnection connect = 1;   // 连接信息
}

message DisconnectResp {
  bool has = 1;
}

message HeartbeatReq {
  TcpConnection connect = 1; // 连接信息
  int64 bind_expire = 2;     // 绑定过期时间(s)
}

message HeartbeatResp {
  bool has = 1;
}

message OnlineReq {
  string serverId = 1;
  map<string, int32> roomCount = 2;
}

message OnlineResp {
  map<string, int32> allRoomCount = 1;
}

message ReceiveReq {
  string uniId = 1;
  imfun.protocol.Proto proto = 2;
}

message ReceiveResp {
}

message NodesReq {
  Platform platform = 1;
  string clientIP = 2;
}

message NodesResp {
  string domain = 1;
  int32 tcp_port = 2;
  int32 ws_port = 3;
  int32 wss_port = 4;
  HbCfg hb_cfg = 5;
  repeated string nodes = 6;
  Backoff backoff = 7;
}

message Backoff {
  int32  base_delay = 1;
  float  multiplier = 2;
  float  jitter = 3;
  int32  max_delay = 4;
}

// 平台
enum Platform {
  Platform_None = 0;
  Platform_PC = 1;         // PC客户端
  Platform_Android = 2;    // 安卓
  Platform_Ios = 3;        // IOS
  Platform_Web = 4;        // PC网页
  Platform_H5 = 5;         // H5网页
  Platform_MinProgram = 6; // 小程序
}

enum App {
  App_None = 0;
  App_Im = 1;
}

// ============= base =================

message Atom {
  string seq_id = 1;       // 请求序列号（用于链路追踪、幂等操作等）
  int64 uid = 2;           // 用户ID
  string did = 3;          // 设备ID
  App app = 4;             // app id
  Platform platform = 5;   // 平台
}

// ============= user =================