syntax = "proto3";

package imfun.logic;

option go_package = "github.com/zhixunjie/im-fun/api/logic;logic";

import "protocol/protocol.proto";

message PushMsg {
  enum Type {
    UserKeys = 0;
    UserRoom = 1;
    UserAll = 2;
  }
  Type type = 1;
  int32 subId = 2;
  int32 speed = 3;
  string serverId = 4;
  string roomId = 5;
  repeated string userKeys = 6;
  bytes msg = 7;
}

message ConnectReq {
  string serverId = 1;
  int64 userId = 2;
  string userKey = 3;
  string roomId = 4;
  string token = 5;
  string platform = 6;
}

message ConnectReply {
  int64 heartbeat = 1;
}

message DisconnectReq {
  string serverId = 1;
  int64 userId = 2;
  string userKey = 3;
}

message DisconnectReply {
  bool has = 1;
}

message HeartbeatReq {
  string serverId = 1;
  int64 userId = 2;
  string userKey = 3;
}

message HeartbeatReply {
}

message OnlineReq {
  string serverId = 1;
  map<string, int32> roomCount = 2;
}

message OnlineReply {
  map<string, int32> allRoomCount = 1;
}

message ReceiveReq {
  int64 userId = 1;
  imfun.protocol.Proto proto = 2;
}

message ReceiveReply {
}

message NodesReq {
  string platform = 1;
  string clientIP = 2;
}

message NodesReply {
  string domain = 1;
  int32 tcp_port = 2;
  int32 ws_port = 3;
  int32 wss_port = 4;
  int32 heartbeat = 5;
  repeated string nodes = 6;
  Backoff backoff = 7;
  int32 heartbeat_max = 8;
}

message Backoff {
  int32  max_delay = 1;
  int32  base_delay = 2;
  float  factor = 3;
  float  jitter = 4;
}

service Logic {
  // Connect
  rpc Connect(ConnectReq) returns (ConnectReply);
  // Disconnect
  rpc Disconnect(DisconnectReq) returns (DisconnectReply);
  // Heartbeat
  rpc Heartbeat(HeartbeatReq) returns (HeartbeatReply);
  // RenewOnline
  rpc RenewOnline(OnlineReq) returns (OnlineReply);
  // Receive
  rpc Receive(ReceiveReq) returns (ReceiveReply);
  // ServerList
  rpc Nodes(NodesReq) returns (NodesReply);
}
