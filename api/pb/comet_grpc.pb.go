// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: comet.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Comet_SendToUsers_FullMethodName  = "/imfun.comet.Comet/SendToUsers"
	Comet_SendToRoom_FullMethodName   = "/imfun.comet.Comet/SendToRoom"
	Comet_SendToAll_FullMethodName    = "/imfun.comet.Comet/SendToAll"
	Comet_GetAllRoomId_FullMethodName = "/imfun.comet.Comet/GetAllRoomId"
)

// CometClient is the client API for Comet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CometClient interface {
	// send msg: to some user
	SendToUsers(ctx context.Context, in *SendToUsersReq, opts ...grpc.CallOption) (*SendToUsersResp, error)
	// send msg: to room's user
	SendToRoom(ctx context.Context, in *SendToRoomReq, opts ...grpc.CallOption) (*SendToRoomResp, error)
	// send msg: to every user in the app
	SendToAll(ctx context.Context, in *SendToAllReq, opts ...grpc.CallOption) (*SendToAllResp, error)
	// get all rooms
	GetAllRoomId(ctx context.Context, in *GetAllRoomIdReq, opts ...grpc.CallOption) (*GetAllRoomIdResp, error)
}

type cometClient struct {
	cc grpc.ClientConnInterface
}

func NewCometClient(cc grpc.ClientConnInterface) CometClient {
	return &cometClient{cc}
}

func (c *cometClient) SendToUsers(ctx context.Context, in *SendToUsersReq, opts ...grpc.CallOption) (*SendToUsersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendToUsersResp)
	err := c.cc.Invoke(ctx, Comet_SendToUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cometClient) SendToRoom(ctx context.Context, in *SendToRoomReq, opts ...grpc.CallOption) (*SendToRoomResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendToRoomResp)
	err := c.cc.Invoke(ctx, Comet_SendToRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cometClient) SendToAll(ctx context.Context, in *SendToAllReq, opts ...grpc.CallOption) (*SendToAllResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendToAllResp)
	err := c.cc.Invoke(ctx, Comet_SendToAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cometClient) GetAllRoomId(ctx context.Context, in *GetAllRoomIdReq, opts ...grpc.CallOption) (*GetAllRoomIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllRoomIdResp)
	err := c.cc.Invoke(ctx, Comet_GetAllRoomId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CometServer is the server API for Comet service.
// All implementations must embed UnimplementedCometServer
// for forward compatibility.
type CometServer interface {
	// send msg: to some user
	SendToUsers(context.Context, *SendToUsersReq) (*SendToUsersResp, error)
	// send msg: to room's user
	SendToRoom(context.Context, *SendToRoomReq) (*SendToRoomResp, error)
	// send msg: to every user in the app
	SendToAll(context.Context, *SendToAllReq) (*SendToAllResp, error)
	// get all rooms
	GetAllRoomId(context.Context, *GetAllRoomIdReq) (*GetAllRoomIdResp, error)
	mustEmbedUnimplementedCometServer()
}

// UnimplementedCometServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCometServer struct{}

func (UnimplementedCometServer) SendToUsers(context.Context, *SendToUsersReq) (*SendToUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToUsers not implemented")
}
func (UnimplementedCometServer) SendToRoom(context.Context, *SendToRoomReq) (*SendToRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToRoom not implemented")
}
func (UnimplementedCometServer) SendToAll(context.Context, *SendToAllReq) (*SendToAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToAll not implemented")
}
func (UnimplementedCometServer) GetAllRoomId(context.Context, *GetAllRoomIdReq) (*GetAllRoomIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRoomId not implemented")
}
func (UnimplementedCometServer) mustEmbedUnimplementedCometServer() {}
func (UnimplementedCometServer) testEmbeddedByValue()               {}

// UnsafeCometServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CometServer will
// result in compilation errors.
type UnsafeCometServer interface {
	mustEmbedUnimplementedCometServer()
}

func RegisterCometServer(s grpc.ServiceRegistrar, srv CometServer) {
	// If the following call pancis, it indicates UnimplementedCometServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Comet_ServiceDesc, srv)
}

func _Comet_SendToUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendToUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CometServer).SendToUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comet_SendToUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CometServer).SendToUsers(ctx, req.(*SendToUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comet_SendToRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendToRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CometServer).SendToRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comet_SendToRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CometServer).SendToRoom(ctx, req.(*SendToRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comet_SendToAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendToAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CometServer).SendToAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comet_SendToAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CometServer).SendToAll(ctx, req.(*SendToAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comet_GetAllRoomId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRoomIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CometServer).GetAllRoomId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comet_GetAllRoomId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CometServer).GetAllRoomId(ctx, req.(*GetAllRoomIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Comet_ServiceDesc is the grpc.ServiceDesc for Comet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Comet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imfun.comet.Comet",
	HandlerType: (*CometServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendToUsers",
			Handler:    _Comet_SendToUsers_Handler,
		},
		{
			MethodName: "SendToRoom",
			Handler:    _Comet_SendToRoom_Handler,
		},
		{
			MethodName: "SendToAll",
			Handler:    _Comet_SendToAll_Handler,
		},
		{
			MethodName: "GetAllRoomId",
			Handler:    _Comet_GetAllRoomId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comet.proto",
}
