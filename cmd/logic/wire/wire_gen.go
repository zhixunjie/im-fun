// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"context"
	grpc2 "github.com/zhixunjie/im-fun/internal/logic/api/grpc"
	"github.com/zhixunjie/im-fun/internal/logic/api/http"
	"github.com/zhixunjie/im-fun/internal/logic/biz"
	"github.com/zhixunjie/im-fun/internal/logic/conf"
	"github.com/zhixunjie/im-fun/internal/logic/data"
	"google.golang.org/grpc"
)

// Injectors from wire.go:

func InitGrpc(ctx context.Context, c *conf.Config) (*grpc.Server, func(), error) {
	bizBiz := biz.NewBiz(c)
	dataData := data.NewData(c)
	contactRepo := data.NewContactRepo(dataData)
	messageRepo := data.NewMessageRepo(dataData)
	contactUseCase := biz.NewContactUseCase(contactRepo, messageRepo)
	messageUseCase := biz.NewMessageUseCase(messageRepo, contactRepo)
	server, cleanup, err := grpc2.NewServer(ctx, c, bizBiz, contactUseCase, messageUseCase)
	if err != nil {
		return nil, nil, err
	}
	return server, func() {
		cleanup()
	}, nil
}

func InitHttp(c *conf.Config) *http.Server {
	bizBiz := biz.NewBiz(c)
	dataData := data.NewData(c)
	contactRepo := data.NewContactRepo(dataData)
	messageRepo := data.NewMessageRepo(dataData)
	contactUseCase := biz.NewContactUseCase(contactRepo, messageRepo)
	messageUseCase := biz.NewMessageUseCase(messageRepo, contactRepo)
	server := http.NewServer(c, bizBiz, contactUseCase, messageUseCase)
	return server
}

func GetMessageRepo(c *conf.Config) *data.MessageRepo {
	dataData := data.NewData(c)
	messageRepo := data.NewMessageRepo(dataData)
	return messageRepo
}

func GetContactRepo(c *conf.Config) *data.ContactRepo {
	dataData := data.NewData(c)
	contactRepo := data.NewContactRepo(dataData)
	return contactRepo
}

func GetMessageUseCase(c *conf.Config) *biz.MessageUseCase {
	dataData := data.NewData(c)
	messageRepo := data.NewMessageRepo(dataData)
	contactRepo := data.NewContactRepo(dataData)
	messageUseCase := biz.NewMessageUseCase(messageRepo, contactRepo)
	return messageUseCase
}

func GetContactUseCase(c *conf.Config) *biz.ContactUseCase {
	dataData := data.NewData(c)
	contactRepo := data.NewContactRepo(dataData)
	messageRepo := data.NewMessageRepo(dataData)
	contactUseCase := biz.NewContactUseCase(contactRepo, messageRepo)
	return contactUseCase
}
