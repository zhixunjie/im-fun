// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zhixunjie/im-fun/internal/logic/data/ent/generate/model"
)

func newChatContact(db *gorm.DB, opts ...gen.DOOption) chatContact {
	_chatContact := chatContact{}

	_chatContact.chatContactDo.UseDB(db, opts...)
	_chatContact.chatContactDo.UseModel(&model.ChatContact{})

	tableName := _chatContact.chatContactDo.TableName()
	_chatContact.ALL = field.NewAsterisk(tableName)
	_chatContact.ID = field.NewUint64(tableName, "id")
	_chatContact.OwnerID = field.NewUint64(tableName, "owner_id")
	_chatContact.OwnerType = field.NewUint32(tableName, "owner_type")
	_chatContact.PeerID = field.NewUint64(tableName, "peer_id")
	_chatContact.PeerType = field.NewUint32(tableName, "peer_type")
	_chatContact.PeerAck = field.NewUint32(tableName, "peer_ack")
	_chatContact.LastMsgID = field.NewUint64(tableName, "last_msg_id")
	_chatContact.LastDelMsgID = field.NewUint64(tableName, "last_del_msg_id")
	_chatContact.VersionID = field.NewUint64(tableName, "version_id")
	_chatContact.SortKey = field.NewUint64(tableName, "sort_key")
	_chatContact.Status = field.NewUint32(tableName, "status")
	_chatContact.Labels = field.NewString(tableName, "labels")
	_chatContact.CreatedAt = field.NewTime(tableName, "created_at")
	_chatContact.UpdatedAt = field.NewTime(tableName, "updated_at")

	_chatContact.fillFieldMap()

	return _chatContact
}

// chatContact 会话表（通信双方各有一行记录）
type chatContact struct {
	chatContactDo

	ALL          field.Asterisk
	ID           field.Uint64 // 自增id,主键
	OwnerID      field.Uint64 // 会话拥有者
	OwnerType    field.Uint32 // 用户类型（owner_id）
	PeerID       field.Uint64 // 联系人（对方用户）
	PeerType     field.Uint32 // 用户类型（peer_id）
	PeerAck      field.Uint32 // peer_id是否给owner发过消息，0：未发过，1：发过
	LastMsgID    field.Uint64 // 聊天记录中，最新一条发送的私信id
	LastDelMsgID field.Uint64 // 聊天记录中，最后一次删除联系人时的私信id
	VersionID    field.Uint64 // 版本id（用于拉取会话框）
	SortKey      field.Uint64 // 会话展示顺序（按顺序展示会话）可修改顺序，如：置顶操作
	Status       field.Uint32 // 联系人状态，0：正常，1：被删除
	Labels       field.String // 会话标签，json字符串
	CreatedAt    field.Time   // 创建时间
	UpdatedAt    field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (c chatContact) Table(newTableName string) *chatContact {
	c.chatContactDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chatContact) As(alias string) *chatContact {
	c.chatContactDo.DO = *(c.chatContactDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chatContact) updateTableName(table string) *chatContact {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint64(table, "id")
	c.OwnerID = field.NewUint64(table, "owner_id")
	c.OwnerType = field.NewUint32(table, "owner_type")
	c.PeerID = field.NewUint64(table, "peer_id")
	c.PeerType = field.NewUint32(table, "peer_type")
	c.PeerAck = field.NewUint32(table, "peer_ack")
	c.LastMsgID = field.NewUint64(table, "last_msg_id")
	c.LastDelMsgID = field.NewUint64(table, "last_del_msg_id")
	c.VersionID = field.NewUint64(table, "version_id")
	c.SortKey = field.NewUint64(table, "sort_key")
	c.Status = field.NewUint32(table, "status")
	c.Labels = field.NewString(table, "labels")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *chatContact) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chatContact) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 14)
	c.fieldMap["id"] = c.ID
	c.fieldMap["owner_id"] = c.OwnerID
	c.fieldMap["owner_type"] = c.OwnerType
	c.fieldMap["peer_id"] = c.PeerID
	c.fieldMap["peer_type"] = c.PeerType
	c.fieldMap["peer_ack"] = c.PeerAck
	c.fieldMap["last_msg_id"] = c.LastMsgID
	c.fieldMap["last_del_msg_id"] = c.LastDelMsgID
	c.fieldMap["version_id"] = c.VersionID
	c.fieldMap["sort_key"] = c.SortKey
	c.fieldMap["status"] = c.Status
	c.fieldMap["labels"] = c.Labels
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c chatContact) clone(db *gorm.DB) chatContact {
	c.chatContactDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chatContact) replaceDB(db *gorm.DB) chatContact {
	c.chatContactDo.ReplaceDB(db)
	return c
}

type chatContactDo struct{ gen.DO }

type IChatContactDo interface {
	gen.SubQuery
	Debug() IChatContactDo
	WithContext(ctx context.Context) IChatContactDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChatContactDo
	WriteDB() IChatContactDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChatContactDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChatContactDo
	Not(conds ...gen.Condition) IChatContactDo
	Or(conds ...gen.Condition) IChatContactDo
	Select(conds ...field.Expr) IChatContactDo
	Where(conds ...gen.Condition) IChatContactDo
	Order(conds ...field.Expr) IChatContactDo
	Distinct(cols ...field.Expr) IChatContactDo
	Omit(cols ...field.Expr) IChatContactDo
	Join(table schema.Tabler, on ...field.Expr) IChatContactDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChatContactDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChatContactDo
	Group(cols ...field.Expr) IChatContactDo
	Having(conds ...gen.Condition) IChatContactDo
	Limit(limit int) IChatContactDo
	Offset(offset int) IChatContactDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChatContactDo
	Unscoped() IChatContactDo
	Create(values ...*model.ChatContact) error
	CreateInBatches(values []*model.ChatContact, batchSize int) error
	Save(values ...*model.ChatContact) error
	First() (*model.ChatContact, error)
	Take() (*model.ChatContact, error)
	Last() (*model.ChatContact, error)
	Find() ([]*model.ChatContact, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChatContact, err error)
	FindInBatches(result *[]*model.ChatContact, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ChatContact) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChatContactDo
	Assign(attrs ...field.AssignExpr) IChatContactDo
	Joins(fields ...field.RelationField) IChatContactDo
	Preload(fields ...field.RelationField) IChatContactDo
	FirstOrInit() (*model.ChatContact, error)
	FirstOrCreate() (*model.ChatContact, error)
	FindByPage(offset int, limit int) (result []*model.ChatContact, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChatContactDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int64) (result *model.ChatContact, err error)
}

// GetByID SELECT * FROM @@table WHERE id=@id
func (c chatContactDo) GetByID(id int64) (result *model.ChatContact, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM chat_contact WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c chatContactDo) Debug() IChatContactDo {
	return c.withDO(c.DO.Debug())
}

func (c chatContactDo) WithContext(ctx context.Context) IChatContactDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chatContactDo) ReadDB() IChatContactDo {
	return c.Clauses(dbresolver.Read)
}

func (c chatContactDo) WriteDB() IChatContactDo {
	return c.Clauses(dbresolver.Write)
}

func (c chatContactDo) Session(config *gorm.Session) IChatContactDo {
	return c.withDO(c.DO.Session(config))
}

func (c chatContactDo) Clauses(conds ...clause.Expression) IChatContactDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chatContactDo) Returning(value interface{}, columns ...string) IChatContactDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chatContactDo) Not(conds ...gen.Condition) IChatContactDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chatContactDo) Or(conds ...gen.Condition) IChatContactDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chatContactDo) Select(conds ...field.Expr) IChatContactDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chatContactDo) Where(conds ...gen.Condition) IChatContactDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chatContactDo) Order(conds ...field.Expr) IChatContactDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chatContactDo) Distinct(cols ...field.Expr) IChatContactDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chatContactDo) Omit(cols ...field.Expr) IChatContactDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chatContactDo) Join(table schema.Tabler, on ...field.Expr) IChatContactDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chatContactDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChatContactDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chatContactDo) RightJoin(table schema.Tabler, on ...field.Expr) IChatContactDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chatContactDo) Group(cols ...field.Expr) IChatContactDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chatContactDo) Having(conds ...gen.Condition) IChatContactDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chatContactDo) Limit(limit int) IChatContactDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chatContactDo) Offset(offset int) IChatContactDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chatContactDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChatContactDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chatContactDo) Unscoped() IChatContactDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chatContactDo) Create(values ...*model.ChatContact) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chatContactDo) CreateInBatches(values []*model.ChatContact, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chatContactDo) Save(values ...*model.ChatContact) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chatContactDo) First() (*model.ChatContact, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatContact), nil
	}
}

func (c chatContactDo) Take() (*model.ChatContact, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatContact), nil
	}
}

func (c chatContactDo) Last() (*model.ChatContact, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatContact), nil
	}
}

func (c chatContactDo) Find() ([]*model.ChatContact, error) {
	result, err := c.DO.Find()
	return result.([]*model.ChatContact), err
}

func (c chatContactDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChatContact, err error) {
	buf := make([]*model.ChatContact, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chatContactDo) FindInBatches(result *[]*model.ChatContact, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chatContactDo) Attrs(attrs ...field.AssignExpr) IChatContactDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chatContactDo) Assign(attrs ...field.AssignExpr) IChatContactDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chatContactDo) Joins(fields ...field.RelationField) IChatContactDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chatContactDo) Preload(fields ...field.RelationField) IChatContactDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chatContactDo) FirstOrInit() (*model.ChatContact, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatContact), nil
	}
}

func (c chatContactDo) FirstOrCreate() (*model.ChatContact, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatContact), nil
	}
}

func (c chatContactDo) FindByPage(offset int, limit int) (result []*model.ChatContact, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chatContactDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chatContactDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chatContactDo) Delete(models ...*model.ChatContact) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chatContactDo) withDO(do gen.Dao) *chatContactDo {
	c.DO = *do.(*gen.DO)
	return c
}
