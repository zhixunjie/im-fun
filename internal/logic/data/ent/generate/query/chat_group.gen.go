// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zhixunjie/im-fun/internal/logic/data/ent/generate/model"
)

func newChatGroup(db *gorm.DB, opts ...gen.DOOption) chatGroup {
	_chatGroup := chatGroup{}

	_chatGroup.chatGroupDo.UseDB(db, opts...)
	_chatGroup.chatGroupDo.UseModel(&model.ChatGroup{})

	tableName := _chatGroup.chatGroupDo.TableName()
	_chatGroup.ALL = field.NewAsterisk(tableName)
	_chatGroup.ID = field.NewUint64(tableName, "id")
	_chatGroup.Name = field.NewString(tableName, "name")
	_chatGroup.CreatedAt = field.NewTime(tableName, "created_at")
	_chatGroup.UpdatedAt = field.NewTime(tableName, "updated_at")

	_chatGroup.fillFieldMap()

	return _chatGroup
}

// chatGroup 群组表
type chatGroup struct {
	chatGroupDo

	ALL       field.Asterisk
	ID        field.Uint64 // 自增id,主键
	Name      field.String // 群组名称
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (c chatGroup) Table(newTableName string) *chatGroup {
	c.chatGroupDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chatGroup) As(alias string) *chatGroup {
	c.chatGroupDo.DO = *(c.chatGroupDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chatGroup) updateTableName(table string) *chatGroup {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint64(table, "id")
	c.Name = field.NewString(table, "name")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *chatGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chatGroup) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 4)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c chatGroup) clone(db *gorm.DB) chatGroup {
	c.chatGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chatGroup) replaceDB(db *gorm.DB) chatGroup {
	c.chatGroupDo.ReplaceDB(db)
	return c
}

type chatGroupDo struct{ gen.DO }

type IChatGroupDo interface {
	gen.SubQuery
	Debug() IChatGroupDo
	WithContext(ctx context.Context) IChatGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChatGroupDo
	WriteDB() IChatGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChatGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChatGroupDo
	Not(conds ...gen.Condition) IChatGroupDo
	Or(conds ...gen.Condition) IChatGroupDo
	Select(conds ...field.Expr) IChatGroupDo
	Where(conds ...gen.Condition) IChatGroupDo
	Order(conds ...field.Expr) IChatGroupDo
	Distinct(cols ...field.Expr) IChatGroupDo
	Omit(cols ...field.Expr) IChatGroupDo
	Join(table schema.Tabler, on ...field.Expr) IChatGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChatGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChatGroupDo
	Group(cols ...field.Expr) IChatGroupDo
	Having(conds ...gen.Condition) IChatGroupDo
	Limit(limit int) IChatGroupDo
	Offset(offset int) IChatGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChatGroupDo
	Unscoped() IChatGroupDo
	Create(values ...*model.ChatGroup) error
	CreateInBatches(values []*model.ChatGroup, batchSize int) error
	Save(values ...*model.ChatGroup) error
	First() (*model.ChatGroup, error)
	Take() (*model.ChatGroup, error)
	Last() (*model.ChatGroup, error)
	Find() ([]*model.ChatGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChatGroup, err error)
	FindInBatches(result *[]*model.ChatGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ChatGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChatGroupDo
	Assign(attrs ...field.AssignExpr) IChatGroupDo
	Joins(fields ...field.RelationField) IChatGroupDo
	Preload(fields ...field.RelationField) IChatGroupDo
	FirstOrInit() (*model.ChatGroup, error)
	FirstOrCreate() (*model.ChatGroup, error)
	FindByPage(offset int, limit int) (result []*model.ChatGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChatGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int64) (result *model.ChatGroup, err error)
}

// GetByID SELECT * FROM @@table WHERE id=@id
func (c chatGroupDo) GetByID(id int64) (result *model.ChatGroup, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM chat_group WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c chatGroupDo) Debug() IChatGroupDo {
	return c.withDO(c.DO.Debug())
}

func (c chatGroupDo) WithContext(ctx context.Context) IChatGroupDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chatGroupDo) ReadDB() IChatGroupDo {
	return c.Clauses(dbresolver.Read)
}

func (c chatGroupDo) WriteDB() IChatGroupDo {
	return c.Clauses(dbresolver.Write)
}

func (c chatGroupDo) Session(config *gorm.Session) IChatGroupDo {
	return c.withDO(c.DO.Session(config))
}

func (c chatGroupDo) Clauses(conds ...clause.Expression) IChatGroupDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chatGroupDo) Returning(value interface{}, columns ...string) IChatGroupDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chatGroupDo) Not(conds ...gen.Condition) IChatGroupDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chatGroupDo) Or(conds ...gen.Condition) IChatGroupDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chatGroupDo) Select(conds ...field.Expr) IChatGroupDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chatGroupDo) Where(conds ...gen.Condition) IChatGroupDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chatGroupDo) Order(conds ...field.Expr) IChatGroupDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chatGroupDo) Distinct(cols ...field.Expr) IChatGroupDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chatGroupDo) Omit(cols ...field.Expr) IChatGroupDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chatGroupDo) Join(table schema.Tabler, on ...field.Expr) IChatGroupDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chatGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChatGroupDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chatGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IChatGroupDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chatGroupDo) Group(cols ...field.Expr) IChatGroupDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chatGroupDo) Having(conds ...gen.Condition) IChatGroupDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chatGroupDo) Limit(limit int) IChatGroupDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chatGroupDo) Offset(offset int) IChatGroupDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chatGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChatGroupDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chatGroupDo) Unscoped() IChatGroupDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chatGroupDo) Create(values ...*model.ChatGroup) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chatGroupDo) CreateInBatches(values []*model.ChatGroup, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chatGroupDo) Save(values ...*model.ChatGroup) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chatGroupDo) First() (*model.ChatGroup, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatGroup), nil
	}
}

func (c chatGroupDo) Take() (*model.ChatGroup, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatGroup), nil
	}
}

func (c chatGroupDo) Last() (*model.ChatGroup, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatGroup), nil
	}
}

func (c chatGroupDo) Find() ([]*model.ChatGroup, error) {
	result, err := c.DO.Find()
	return result.([]*model.ChatGroup), err
}

func (c chatGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChatGroup, err error) {
	buf := make([]*model.ChatGroup, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chatGroupDo) FindInBatches(result *[]*model.ChatGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chatGroupDo) Attrs(attrs ...field.AssignExpr) IChatGroupDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chatGroupDo) Assign(attrs ...field.AssignExpr) IChatGroupDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chatGroupDo) Joins(fields ...field.RelationField) IChatGroupDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chatGroupDo) Preload(fields ...field.RelationField) IChatGroupDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chatGroupDo) FirstOrInit() (*model.ChatGroup, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatGroup), nil
	}
}

func (c chatGroupDo) FirstOrCreate() (*model.ChatGroup, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatGroup), nil
	}
}

func (c chatGroupDo) FindByPage(offset int, limit int) (result []*model.ChatGroup, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chatGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chatGroupDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chatGroupDo) Delete(models ...*model.ChatGroup) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chatGroupDo) withDO(do gen.Dao) *chatGroupDo {
	c.DO = *do.(*gen.DO)
	return c
}
