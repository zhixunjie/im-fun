// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zhixunjie/im-fun/internal/logic/data/ent/generate/model"
)

func newChatGroupMessageRef(db *gorm.DB, opts ...gen.DOOption) chatGroupMessageRef {
	_chatGroupMessageRef := chatGroupMessageRef{}

	_chatGroupMessageRef.chatGroupMessageRefDo.UseDB(db, opts...)
	_chatGroupMessageRef.chatGroupMessageRefDo.UseModel(&model.ChatGroupMessageRef{})

	tableName := _chatGroupMessageRef.chatGroupMessageRefDo.TableName()
	_chatGroupMessageRef.ALL = field.NewAsterisk(tableName)
	_chatGroupMessageRef.ID = field.NewUint64(tableName, "id")
	_chatGroupMessageRef.GroupID = field.NewUint64(tableName, "group_id")
	_chatGroupMessageRef.MsgID = field.NewUint64(tableName, "msg_id")
	_chatGroupMessageRef.MemberID = field.NewUint64(tableName, "member_id")
	_chatGroupMessageRef.RefMemberID = field.NewUint64(tableName, "ref_member_id")
	_chatGroupMessageRef.HasRead = field.NewUint32(tableName, "has_read")
	_chatGroupMessageRef.CreatedAt = field.NewTime(tableName, "created_at")
	_chatGroupMessageRef.UpdatedAt = field.NewTime(tableName, "updated_at")

	_chatGroupMessageRef.fillFieldMap()

	return _chatGroupMessageRef
}

// chatGroupMessageRef 某条群组消息@的用户
type chatGroupMessageRef struct {
	chatGroupMessageRefDo

	ALL         field.Asterisk
	ID          field.Uint64 // 自增id
	GroupID     field.Uint64 // 群组id
	MsgID       field.Uint64 // 消息id
	MemberID    field.Uint64 // 谁发起的@
	RefMemberID field.Uint64 // 被@的群成员
	HasRead     field.Uint32 // 是否已读，0：未读，1：已读
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (c chatGroupMessageRef) Table(newTableName string) *chatGroupMessageRef {
	c.chatGroupMessageRefDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chatGroupMessageRef) As(alias string) *chatGroupMessageRef {
	c.chatGroupMessageRefDo.DO = *(c.chatGroupMessageRefDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chatGroupMessageRef) updateTableName(table string) *chatGroupMessageRef {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint64(table, "id")
	c.GroupID = field.NewUint64(table, "group_id")
	c.MsgID = field.NewUint64(table, "msg_id")
	c.MemberID = field.NewUint64(table, "member_id")
	c.RefMemberID = field.NewUint64(table, "ref_member_id")
	c.HasRead = field.NewUint32(table, "has_read")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *chatGroupMessageRef) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chatGroupMessageRef) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["group_id"] = c.GroupID
	c.fieldMap["msg_id"] = c.MsgID
	c.fieldMap["member_id"] = c.MemberID
	c.fieldMap["ref_member_id"] = c.RefMemberID
	c.fieldMap["has_read"] = c.HasRead
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c chatGroupMessageRef) clone(db *gorm.DB) chatGroupMessageRef {
	c.chatGroupMessageRefDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chatGroupMessageRef) replaceDB(db *gorm.DB) chatGroupMessageRef {
	c.chatGroupMessageRefDo.ReplaceDB(db)
	return c
}

type chatGroupMessageRefDo struct{ gen.DO }

type IChatGroupMessageRefDo interface {
	gen.SubQuery
	Debug() IChatGroupMessageRefDo
	WithContext(ctx context.Context) IChatGroupMessageRefDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChatGroupMessageRefDo
	WriteDB() IChatGroupMessageRefDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChatGroupMessageRefDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChatGroupMessageRefDo
	Not(conds ...gen.Condition) IChatGroupMessageRefDo
	Or(conds ...gen.Condition) IChatGroupMessageRefDo
	Select(conds ...field.Expr) IChatGroupMessageRefDo
	Where(conds ...gen.Condition) IChatGroupMessageRefDo
	Order(conds ...field.Expr) IChatGroupMessageRefDo
	Distinct(cols ...field.Expr) IChatGroupMessageRefDo
	Omit(cols ...field.Expr) IChatGroupMessageRefDo
	Join(table schema.Tabler, on ...field.Expr) IChatGroupMessageRefDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChatGroupMessageRefDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChatGroupMessageRefDo
	Group(cols ...field.Expr) IChatGroupMessageRefDo
	Having(conds ...gen.Condition) IChatGroupMessageRefDo
	Limit(limit int) IChatGroupMessageRefDo
	Offset(offset int) IChatGroupMessageRefDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChatGroupMessageRefDo
	Unscoped() IChatGroupMessageRefDo
	Create(values ...*model.ChatGroupMessageRef) error
	CreateInBatches(values []*model.ChatGroupMessageRef, batchSize int) error
	Save(values ...*model.ChatGroupMessageRef) error
	First() (*model.ChatGroupMessageRef, error)
	Take() (*model.ChatGroupMessageRef, error)
	Last() (*model.ChatGroupMessageRef, error)
	Find() ([]*model.ChatGroupMessageRef, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChatGroupMessageRef, err error)
	FindInBatches(result *[]*model.ChatGroupMessageRef, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ChatGroupMessageRef) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChatGroupMessageRefDo
	Assign(attrs ...field.AssignExpr) IChatGroupMessageRefDo
	Joins(fields ...field.RelationField) IChatGroupMessageRefDo
	Preload(fields ...field.RelationField) IChatGroupMessageRefDo
	FirstOrInit() (*model.ChatGroupMessageRef, error)
	FirstOrCreate() (*model.ChatGroupMessageRef, error)
	FindByPage(offset int, limit int) (result []*model.ChatGroupMessageRef, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChatGroupMessageRefDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int64) (result *model.ChatGroupMessageRef, err error)
}

// GetByID SELECT * FROM @@table WHERE id=@id
func (c chatGroupMessageRefDo) GetByID(id int64) (result *model.ChatGroupMessageRef, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM chat_group_message_ref WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c chatGroupMessageRefDo) Debug() IChatGroupMessageRefDo {
	return c.withDO(c.DO.Debug())
}

func (c chatGroupMessageRefDo) WithContext(ctx context.Context) IChatGroupMessageRefDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chatGroupMessageRefDo) ReadDB() IChatGroupMessageRefDo {
	return c.Clauses(dbresolver.Read)
}

func (c chatGroupMessageRefDo) WriteDB() IChatGroupMessageRefDo {
	return c.Clauses(dbresolver.Write)
}

func (c chatGroupMessageRefDo) Session(config *gorm.Session) IChatGroupMessageRefDo {
	return c.withDO(c.DO.Session(config))
}

func (c chatGroupMessageRefDo) Clauses(conds ...clause.Expression) IChatGroupMessageRefDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chatGroupMessageRefDo) Returning(value interface{}, columns ...string) IChatGroupMessageRefDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chatGroupMessageRefDo) Not(conds ...gen.Condition) IChatGroupMessageRefDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chatGroupMessageRefDo) Or(conds ...gen.Condition) IChatGroupMessageRefDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chatGroupMessageRefDo) Select(conds ...field.Expr) IChatGroupMessageRefDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chatGroupMessageRefDo) Where(conds ...gen.Condition) IChatGroupMessageRefDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chatGroupMessageRefDo) Order(conds ...field.Expr) IChatGroupMessageRefDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chatGroupMessageRefDo) Distinct(cols ...field.Expr) IChatGroupMessageRefDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chatGroupMessageRefDo) Omit(cols ...field.Expr) IChatGroupMessageRefDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chatGroupMessageRefDo) Join(table schema.Tabler, on ...field.Expr) IChatGroupMessageRefDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chatGroupMessageRefDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChatGroupMessageRefDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chatGroupMessageRefDo) RightJoin(table schema.Tabler, on ...field.Expr) IChatGroupMessageRefDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chatGroupMessageRefDo) Group(cols ...field.Expr) IChatGroupMessageRefDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chatGroupMessageRefDo) Having(conds ...gen.Condition) IChatGroupMessageRefDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chatGroupMessageRefDo) Limit(limit int) IChatGroupMessageRefDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chatGroupMessageRefDo) Offset(offset int) IChatGroupMessageRefDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chatGroupMessageRefDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChatGroupMessageRefDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chatGroupMessageRefDo) Unscoped() IChatGroupMessageRefDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chatGroupMessageRefDo) Create(values ...*model.ChatGroupMessageRef) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chatGroupMessageRefDo) CreateInBatches(values []*model.ChatGroupMessageRef, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chatGroupMessageRefDo) Save(values ...*model.ChatGroupMessageRef) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chatGroupMessageRefDo) First() (*model.ChatGroupMessageRef, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatGroupMessageRef), nil
	}
}

func (c chatGroupMessageRefDo) Take() (*model.ChatGroupMessageRef, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatGroupMessageRef), nil
	}
}

func (c chatGroupMessageRefDo) Last() (*model.ChatGroupMessageRef, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatGroupMessageRef), nil
	}
}

func (c chatGroupMessageRefDo) Find() ([]*model.ChatGroupMessageRef, error) {
	result, err := c.DO.Find()
	return result.([]*model.ChatGroupMessageRef), err
}

func (c chatGroupMessageRefDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChatGroupMessageRef, err error) {
	buf := make([]*model.ChatGroupMessageRef, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chatGroupMessageRefDo) FindInBatches(result *[]*model.ChatGroupMessageRef, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chatGroupMessageRefDo) Attrs(attrs ...field.AssignExpr) IChatGroupMessageRefDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chatGroupMessageRefDo) Assign(attrs ...field.AssignExpr) IChatGroupMessageRefDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chatGroupMessageRefDo) Joins(fields ...field.RelationField) IChatGroupMessageRefDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chatGroupMessageRefDo) Preload(fields ...field.RelationField) IChatGroupMessageRefDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chatGroupMessageRefDo) FirstOrInit() (*model.ChatGroupMessageRef, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatGroupMessageRef), nil
	}
}

func (c chatGroupMessageRefDo) FirstOrCreate() (*model.ChatGroupMessageRef, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatGroupMessageRef), nil
	}
}

func (c chatGroupMessageRefDo) FindByPage(offset int, limit int) (result []*model.ChatGroupMessageRef, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chatGroupMessageRefDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chatGroupMessageRefDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chatGroupMessageRefDo) Delete(models ...*model.ChatGroupMessageRef) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chatGroupMessageRefDo) withDO(do gen.Dao) *chatGroupMessageRefDo {
	c.DO = *do.(*gen.DO)
	return c
}
