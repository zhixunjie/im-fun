// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zhixunjie/im-fun/internal/logic/data/ent/generate/model"
)

func newChatGroupUser(db *gorm.DB, opts ...gen.DOOption) chatGroupUser {
	_chatGroupUser := chatGroupUser{}

	_chatGroupUser.chatGroupUserDo.UseDB(db, opts...)
	_chatGroupUser.chatGroupUserDo.UseModel(&model.ChatGroupUser{})

	tableName := _chatGroupUser.chatGroupUserDo.TableName()
	_chatGroupUser.ALL = field.NewAsterisk(tableName)
	_chatGroupUser.ID = field.NewUint64(tableName, "id")
	_chatGroupUser.MemberID = field.NewUint64(tableName, "member_id")
	_chatGroupUser.GroupID = field.NewUint64(tableName, "group_id")
	_chatGroupUser.CreatedAt = field.NewTime(tableName, "created_at")
	_chatGroupUser.UpdatedAt = field.NewTime(tableName, "updated_at")

	_chatGroupUser.fillFieldMap()

	return _chatGroupUser
}

// chatGroupUser 群组与用户的绑定关系
type chatGroupUser struct {
	chatGroupUserDo

	ALL       field.Asterisk
	ID        field.Uint64 // 自增id,主键
	MemberID  field.Uint64 // 群组成员id
	GroupID   field.Uint64 // 群组id
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (c chatGroupUser) Table(newTableName string) *chatGroupUser {
	c.chatGroupUserDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chatGroupUser) As(alias string) *chatGroupUser {
	c.chatGroupUserDo.DO = *(c.chatGroupUserDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chatGroupUser) updateTableName(table string) *chatGroupUser {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint64(table, "id")
	c.MemberID = field.NewUint64(table, "member_id")
	c.GroupID = field.NewUint64(table, "group_id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *chatGroupUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chatGroupUser) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 5)
	c.fieldMap["id"] = c.ID
	c.fieldMap["member_id"] = c.MemberID
	c.fieldMap["group_id"] = c.GroupID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c chatGroupUser) clone(db *gorm.DB) chatGroupUser {
	c.chatGroupUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chatGroupUser) replaceDB(db *gorm.DB) chatGroupUser {
	c.chatGroupUserDo.ReplaceDB(db)
	return c
}

type chatGroupUserDo struct{ gen.DO }

type IChatGroupUserDo interface {
	gen.SubQuery
	Debug() IChatGroupUserDo
	WithContext(ctx context.Context) IChatGroupUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChatGroupUserDo
	WriteDB() IChatGroupUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChatGroupUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChatGroupUserDo
	Not(conds ...gen.Condition) IChatGroupUserDo
	Or(conds ...gen.Condition) IChatGroupUserDo
	Select(conds ...field.Expr) IChatGroupUserDo
	Where(conds ...gen.Condition) IChatGroupUserDo
	Order(conds ...field.Expr) IChatGroupUserDo
	Distinct(cols ...field.Expr) IChatGroupUserDo
	Omit(cols ...field.Expr) IChatGroupUserDo
	Join(table schema.Tabler, on ...field.Expr) IChatGroupUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChatGroupUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChatGroupUserDo
	Group(cols ...field.Expr) IChatGroupUserDo
	Having(conds ...gen.Condition) IChatGroupUserDo
	Limit(limit int) IChatGroupUserDo
	Offset(offset int) IChatGroupUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChatGroupUserDo
	Unscoped() IChatGroupUserDo
	Create(values ...*model.ChatGroupUser) error
	CreateInBatches(values []*model.ChatGroupUser, batchSize int) error
	Save(values ...*model.ChatGroupUser) error
	First() (*model.ChatGroupUser, error)
	Take() (*model.ChatGroupUser, error)
	Last() (*model.ChatGroupUser, error)
	Find() ([]*model.ChatGroupUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChatGroupUser, err error)
	FindInBatches(result *[]*model.ChatGroupUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ChatGroupUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChatGroupUserDo
	Assign(attrs ...field.AssignExpr) IChatGroupUserDo
	Joins(fields ...field.RelationField) IChatGroupUserDo
	Preload(fields ...field.RelationField) IChatGroupUserDo
	FirstOrInit() (*model.ChatGroupUser, error)
	FirstOrCreate() (*model.ChatGroupUser, error)
	FindByPage(offset int, limit int) (result []*model.ChatGroupUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChatGroupUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int64) (result *model.ChatGroupUser, err error)
}

// GetByID SELECT * FROM @@table WHERE id=@id
func (c chatGroupUserDo) GetByID(id int64) (result *model.ChatGroupUser, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM chat_group_user WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c chatGroupUserDo) Debug() IChatGroupUserDo {
	return c.withDO(c.DO.Debug())
}

func (c chatGroupUserDo) WithContext(ctx context.Context) IChatGroupUserDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chatGroupUserDo) ReadDB() IChatGroupUserDo {
	return c.Clauses(dbresolver.Read)
}

func (c chatGroupUserDo) WriteDB() IChatGroupUserDo {
	return c.Clauses(dbresolver.Write)
}

func (c chatGroupUserDo) Session(config *gorm.Session) IChatGroupUserDo {
	return c.withDO(c.DO.Session(config))
}

func (c chatGroupUserDo) Clauses(conds ...clause.Expression) IChatGroupUserDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chatGroupUserDo) Returning(value interface{}, columns ...string) IChatGroupUserDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chatGroupUserDo) Not(conds ...gen.Condition) IChatGroupUserDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chatGroupUserDo) Or(conds ...gen.Condition) IChatGroupUserDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chatGroupUserDo) Select(conds ...field.Expr) IChatGroupUserDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chatGroupUserDo) Where(conds ...gen.Condition) IChatGroupUserDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chatGroupUserDo) Order(conds ...field.Expr) IChatGroupUserDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chatGroupUserDo) Distinct(cols ...field.Expr) IChatGroupUserDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chatGroupUserDo) Omit(cols ...field.Expr) IChatGroupUserDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chatGroupUserDo) Join(table schema.Tabler, on ...field.Expr) IChatGroupUserDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chatGroupUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChatGroupUserDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chatGroupUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IChatGroupUserDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chatGroupUserDo) Group(cols ...field.Expr) IChatGroupUserDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chatGroupUserDo) Having(conds ...gen.Condition) IChatGroupUserDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chatGroupUserDo) Limit(limit int) IChatGroupUserDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chatGroupUserDo) Offset(offset int) IChatGroupUserDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chatGroupUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChatGroupUserDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chatGroupUserDo) Unscoped() IChatGroupUserDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chatGroupUserDo) Create(values ...*model.ChatGroupUser) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chatGroupUserDo) CreateInBatches(values []*model.ChatGroupUser, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chatGroupUserDo) Save(values ...*model.ChatGroupUser) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chatGroupUserDo) First() (*model.ChatGroupUser, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatGroupUser), nil
	}
}

func (c chatGroupUserDo) Take() (*model.ChatGroupUser, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatGroupUser), nil
	}
}

func (c chatGroupUserDo) Last() (*model.ChatGroupUser, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatGroupUser), nil
	}
}

func (c chatGroupUserDo) Find() ([]*model.ChatGroupUser, error) {
	result, err := c.DO.Find()
	return result.([]*model.ChatGroupUser), err
}

func (c chatGroupUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChatGroupUser, err error) {
	buf := make([]*model.ChatGroupUser, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chatGroupUserDo) FindInBatches(result *[]*model.ChatGroupUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chatGroupUserDo) Attrs(attrs ...field.AssignExpr) IChatGroupUserDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chatGroupUserDo) Assign(attrs ...field.AssignExpr) IChatGroupUserDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chatGroupUserDo) Joins(fields ...field.RelationField) IChatGroupUserDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chatGroupUserDo) Preload(fields ...field.RelationField) IChatGroupUserDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chatGroupUserDo) FirstOrInit() (*model.ChatGroupUser, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatGroupUser), nil
	}
}

func (c chatGroupUserDo) FirstOrCreate() (*model.ChatGroupUser, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatGroupUser), nil
	}
}

func (c chatGroupUserDo) FindByPage(offset int, limit int) (result []*model.ChatGroupUser, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chatGroupUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chatGroupUserDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chatGroupUserDo) Delete(models ...*model.ChatGroupUser) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chatGroupUserDo) withDO(do gen.Dao) *chatGroupUserDo {
	c.DO = *do.(*gen.DO)
	return c
}
