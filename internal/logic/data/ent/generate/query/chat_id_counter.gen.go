// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zhixunjie/im-fun/internal/logic/data/ent/generate/model"
)

func newChatIDCounter(db *gorm.DB, opts ...gen.DOOption) chatIDCounter {
	_chatIDCounter := chatIDCounter{}

	_chatIDCounter.chatIDCounterDo.UseDB(db, opts...)
	_chatIDCounter.chatIDCounterDo.UseModel(&model.ChatIDCounter{})

	tableName := _chatIDCounter.chatIDCounterDo.TableName()
	_chatIDCounter.ALL = field.NewAsterisk(tableName)
	_chatIDCounter.Str = field.NewString(tableName, "str")
	_chatIDCounter.StrCrc32 = field.NewUint64(tableName, "str_crc32")
	_chatIDCounter.Value = field.NewUint64(tableName, "value")
	_chatIDCounter.Timestamp = field.NewUint64(tableName, "timestamp")
	_chatIDCounter.CreatedAt = field.NewUint64(tableName, "created_at")
	_chatIDCounter.UpdatedAt = field.NewUint64(tableName, "updated_at")

	_chatIDCounter.fillFieldMap()

	return _chatIDCounter
}

// chatIDCounter 计数器（用于生成各种ID）
type chatIDCounter struct {
	chatIDCounterDo

	ALL       field.Asterisk
	Str       field.String // key字符串
	StrCrc32  field.Uint64 // key字符串
	Value     field.Uint64 // 递增数值
	Timestamp field.Uint64 // 时间戳
	CreatedAt field.Uint64 // 创建时间
	UpdatedAt field.Uint64 // 更新时间

	fieldMap map[string]field.Expr
}

func (c chatIDCounter) Table(newTableName string) *chatIDCounter {
	c.chatIDCounterDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chatIDCounter) As(alias string) *chatIDCounter {
	c.chatIDCounterDo.DO = *(c.chatIDCounterDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chatIDCounter) updateTableName(table string) *chatIDCounter {
	c.ALL = field.NewAsterisk(table)
	c.Str = field.NewString(table, "str")
	c.StrCrc32 = field.NewUint64(table, "str_crc32")
	c.Value = field.NewUint64(table, "value")
	c.Timestamp = field.NewUint64(table, "timestamp")
	c.CreatedAt = field.NewUint64(table, "created_at")
	c.UpdatedAt = field.NewUint64(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *chatIDCounter) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chatIDCounter) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["str"] = c.Str
	c.fieldMap["str_crc32"] = c.StrCrc32
	c.fieldMap["value"] = c.Value
	c.fieldMap["timestamp"] = c.Timestamp
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c chatIDCounter) clone(db *gorm.DB) chatIDCounter {
	c.chatIDCounterDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chatIDCounter) replaceDB(db *gorm.DB) chatIDCounter {
	c.chatIDCounterDo.ReplaceDB(db)
	return c
}

type chatIDCounterDo struct{ gen.DO }

type IChatIDCounterDo interface {
	gen.SubQuery
	Debug() IChatIDCounterDo
	WithContext(ctx context.Context) IChatIDCounterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChatIDCounterDo
	WriteDB() IChatIDCounterDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChatIDCounterDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChatIDCounterDo
	Not(conds ...gen.Condition) IChatIDCounterDo
	Or(conds ...gen.Condition) IChatIDCounterDo
	Select(conds ...field.Expr) IChatIDCounterDo
	Where(conds ...gen.Condition) IChatIDCounterDo
	Order(conds ...field.Expr) IChatIDCounterDo
	Distinct(cols ...field.Expr) IChatIDCounterDo
	Omit(cols ...field.Expr) IChatIDCounterDo
	Join(table schema.Tabler, on ...field.Expr) IChatIDCounterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChatIDCounterDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChatIDCounterDo
	Group(cols ...field.Expr) IChatIDCounterDo
	Having(conds ...gen.Condition) IChatIDCounterDo
	Limit(limit int) IChatIDCounterDo
	Offset(offset int) IChatIDCounterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChatIDCounterDo
	Unscoped() IChatIDCounterDo
	Create(values ...*model.ChatIDCounter) error
	CreateInBatches(values []*model.ChatIDCounter, batchSize int) error
	Save(values ...*model.ChatIDCounter) error
	First() (*model.ChatIDCounter, error)
	Take() (*model.ChatIDCounter, error)
	Last() (*model.ChatIDCounter, error)
	Find() ([]*model.ChatIDCounter, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChatIDCounter, err error)
	FindInBatches(result *[]*model.ChatIDCounter, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ChatIDCounter) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChatIDCounterDo
	Assign(attrs ...field.AssignExpr) IChatIDCounterDo
	Joins(fields ...field.RelationField) IChatIDCounterDo
	Preload(fields ...field.RelationField) IChatIDCounterDo
	FirstOrInit() (*model.ChatIDCounter, error)
	FirstOrCreate() (*model.ChatIDCounter, error)
	FindByPage(offset int, limit int) (result []*model.ChatIDCounter, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChatIDCounterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int64) (result *model.ChatIDCounter, err error)
}

// GetByID SELECT * FROM @@table WHERE id=@id
func (c chatIDCounterDo) GetByID(id int64) (result *model.ChatIDCounter, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM chat_id_counter WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c chatIDCounterDo) Debug() IChatIDCounterDo {
	return c.withDO(c.DO.Debug())
}

func (c chatIDCounterDo) WithContext(ctx context.Context) IChatIDCounterDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chatIDCounterDo) ReadDB() IChatIDCounterDo {
	return c.Clauses(dbresolver.Read)
}

func (c chatIDCounterDo) WriteDB() IChatIDCounterDo {
	return c.Clauses(dbresolver.Write)
}

func (c chatIDCounterDo) Session(config *gorm.Session) IChatIDCounterDo {
	return c.withDO(c.DO.Session(config))
}

func (c chatIDCounterDo) Clauses(conds ...clause.Expression) IChatIDCounterDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chatIDCounterDo) Returning(value interface{}, columns ...string) IChatIDCounterDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chatIDCounterDo) Not(conds ...gen.Condition) IChatIDCounterDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chatIDCounterDo) Or(conds ...gen.Condition) IChatIDCounterDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chatIDCounterDo) Select(conds ...field.Expr) IChatIDCounterDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chatIDCounterDo) Where(conds ...gen.Condition) IChatIDCounterDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chatIDCounterDo) Order(conds ...field.Expr) IChatIDCounterDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chatIDCounterDo) Distinct(cols ...field.Expr) IChatIDCounterDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chatIDCounterDo) Omit(cols ...field.Expr) IChatIDCounterDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chatIDCounterDo) Join(table schema.Tabler, on ...field.Expr) IChatIDCounterDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chatIDCounterDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChatIDCounterDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chatIDCounterDo) RightJoin(table schema.Tabler, on ...field.Expr) IChatIDCounterDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chatIDCounterDo) Group(cols ...field.Expr) IChatIDCounterDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chatIDCounterDo) Having(conds ...gen.Condition) IChatIDCounterDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chatIDCounterDo) Limit(limit int) IChatIDCounterDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chatIDCounterDo) Offset(offset int) IChatIDCounterDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chatIDCounterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChatIDCounterDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chatIDCounterDo) Unscoped() IChatIDCounterDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chatIDCounterDo) Create(values ...*model.ChatIDCounter) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chatIDCounterDo) CreateInBatches(values []*model.ChatIDCounter, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chatIDCounterDo) Save(values ...*model.ChatIDCounter) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chatIDCounterDo) First() (*model.ChatIDCounter, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatIDCounter), nil
	}
}

func (c chatIDCounterDo) Take() (*model.ChatIDCounter, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatIDCounter), nil
	}
}

func (c chatIDCounterDo) Last() (*model.ChatIDCounter, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatIDCounter), nil
	}
}

func (c chatIDCounterDo) Find() ([]*model.ChatIDCounter, error) {
	result, err := c.DO.Find()
	return result.([]*model.ChatIDCounter), err
}

func (c chatIDCounterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChatIDCounter, err error) {
	buf := make([]*model.ChatIDCounter, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chatIDCounterDo) FindInBatches(result *[]*model.ChatIDCounter, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chatIDCounterDo) Attrs(attrs ...field.AssignExpr) IChatIDCounterDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chatIDCounterDo) Assign(attrs ...field.AssignExpr) IChatIDCounterDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chatIDCounterDo) Joins(fields ...field.RelationField) IChatIDCounterDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chatIDCounterDo) Preload(fields ...field.RelationField) IChatIDCounterDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chatIDCounterDo) FirstOrInit() (*model.ChatIDCounter, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatIDCounter), nil
	}
}

func (c chatIDCounterDo) FirstOrCreate() (*model.ChatIDCounter, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatIDCounter), nil
	}
}

func (c chatIDCounterDo) FindByPage(offset int, limit int) (result []*model.ChatIDCounter, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chatIDCounterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chatIDCounterDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chatIDCounterDo) Delete(models ...*model.ChatIDCounter) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chatIDCounterDo) withDO(do gen.Dao) *chatIDCounterDo {
	c.DO = *do.(*gen.DO)
	return c
}
