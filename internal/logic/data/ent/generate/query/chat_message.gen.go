// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zhixunjie/im-fun/internal/logic/data/ent/generate/model"
)

func newChatMessage(db *gorm.DB, opts ...gen.DOOption) chatMessage {
	_chatMessage := chatMessage{}

	_chatMessage.chatMessageDo.UseDB(db, opts...)
	_chatMessage.chatMessageDo.UseModel(&model.ChatMessage{})

	tableName := _chatMessage.chatMessageDo.TableName()
	_chatMessage.ALL = field.NewAsterisk(tableName)
	_chatMessage.ID = field.NewUint64(tableName, "id")
	_chatMessage.MsgID = field.NewUint64(tableName, "msg_id")
	_chatMessage.SeqID = field.NewUint64(tableName, "seq_id")
	_chatMessage.MsgType = field.NewUint32(tableName, "msg_type")
	_chatMessage.Content = field.NewString(tableName, "content")
	_chatMessage.SessionID = field.NewString(tableName, "session_id")
	_chatMessage.SenderID = field.NewUint64(tableName, "sender_id")
	_chatMessage.SenderType = field.NewUint32(tableName, "sender_type")
	_chatMessage.VersionID = field.NewUint64(tableName, "version_id")
	_chatMessage.SortKey = field.NewUint64(tableName, "sort_key")
	_chatMessage.Status = field.NewUint32(tableName, "status")
	_chatMessage.HasRead = field.NewUint32(tableName, "has_read")
	_chatMessage.InvisibleList = field.NewString(tableName, "invisible_list")
	_chatMessage.CreatedAt = field.NewTime(tableName, "created_at")
	_chatMessage.UpdatedAt = field.NewTime(tableName, "updated_at")

	_chatMessage.fillFieldMap()

	return _chatMessage
}

// chatMessage 消息表（一条私信只有一行记录）
type chatMessage struct {
	chatMessageDo

	ALL           field.Asterisk
	ID            field.Uint64 // 自增id
	MsgID         field.Uint64 // 消息唯一id（服务端生成）
	SeqID         field.Uint64 // 消息唯一id（客户端生成）
	MsgType       field.Uint32 // 消息类型
	Content       field.String // 消息内容，json格式
	SessionID     field.String // 会话id
	SenderID      field.Uint64 // 消息发送者id
	SenderType    field.Uint32 // 消息发送者的用户类型
	VersionID     field.Uint64 // 版本id（用于拉取消息）
	SortKey       field.Uint64 // 消息展示顺序（按顺序展示消息）
	Status        field.Uint32 // 消息状态
	HasRead       field.Uint32 // 接收方是否已读，0：未读，1：已读
	InvisibleList field.String // 发送方看到消息发出去了，但是对于在列表的用户是不可见的
	CreatedAt     field.Time   // 创建时间
	UpdatedAt     field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (c chatMessage) Table(newTableName string) *chatMessage {
	c.chatMessageDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chatMessage) As(alias string) *chatMessage {
	c.chatMessageDo.DO = *(c.chatMessageDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chatMessage) updateTableName(table string) *chatMessage {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint64(table, "id")
	c.MsgID = field.NewUint64(table, "msg_id")
	c.SeqID = field.NewUint64(table, "seq_id")
	c.MsgType = field.NewUint32(table, "msg_type")
	c.Content = field.NewString(table, "content")
	c.SessionID = field.NewString(table, "session_id")
	c.SenderID = field.NewUint64(table, "sender_id")
	c.SenderType = field.NewUint32(table, "sender_type")
	c.VersionID = field.NewUint64(table, "version_id")
	c.SortKey = field.NewUint64(table, "sort_key")
	c.Status = field.NewUint32(table, "status")
	c.HasRead = field.NewUint32(table, "has_read")
	c.InvisibleList = field.NewString(table, "invisible_list")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *chatMessage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chatMessage) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 15)
	c.fieldMap["id"] = c.ID
	c.fieldMap["msg_id"] = c.MsgID
	c.fieldMap["seq_id"] = c.SeqID
	c.fieldMap["msg_type"] = c.MsgType
	c.fieldMap["content"] = c.Content
	c.fieldMap["session_id"] = c.SessionID
	c.fieldMap["sender_id"] = c.SenderID
	c.fieldMap["sender_type"] = c.SenderType
	c.fieldMap["version_id"] = c.VersionID
	c.fieldMap["sort_key"] = c.SortKey
	c.fieldMap["status"] = c.Status
	c.fieldMap["has_read"] = c.HasRead
	c.fieldMap["invisible_list"] = c.InvisibleList
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c chatMessage) clone(db *gorm.DB) chatMessage {
	c.chatMessageDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chatMessage) replaceDB(db *gorm.DB) chatMessage {
	c.chatMessageDo.ReplaceDB(db)
	return c
}

type chatMessageDo struct{ gen.DO }

type IChatMessageDo interface {
	gen.SubQuery
	Debug() IChatMessageDo
	WithContext(ctx context.Context) IChatMessageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChatMessageDo
	WriteDB() IChatMessageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChatMessageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChatMessageDo
	Not(conds ...gen.Condition) IChatMessageDo
	Or(conds ...gen.Condition) IChatMessageDo
	Select(conds ...field.Expr) IChatMessageDo
	Where(conds ...gen.Condition) IChatMessageDo
	Order(conds ...field.Expr) IChatMessageDo
	Distinct(cols ...field.Expr) IChatMessageDo
	Omit(cols ...field.Expr) IChatMessageDo
	Join(table schema.Tabler, on ...field.Expr) IChatMessageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChatMessageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChatMessageDo
	Group(cols ...field.Expr) IChatMessageDo
	Having(conds ...gen.Condition) IChatMessageDo
	Limit(limit int) IChatMessageDo
	Offset(offset int) IChatMessageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChatMessageDo
	Unscoped() IChatMessageDo
	Create(values ...*model.ChatMessage) error
	CreateInBatches(values []*model.ChatMessage, batchSize int) error
	Save(values ...*model.ChatMessage) error
	First() (*model.ChatMessage, error)
	Take() (*model.ChatMessage, error)
	Last() (*model.ChatMessage, error)
	Find() ([]*model.ChatMessage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChatMessage, err error)
	FindInBatches(result *[]*model.ChatMessage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ChatMessage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChatMessageDo
	Assign(attrs ...field.AssignExpr) IChatMessageDo
	Joins(fields ...field.RelationField) IChatMessageDo
	Preload(fields ...field.RelationField) IChatMessageDo
	FirstOrInit() (*model.ChatMessage, error)
	FirstOrCreate() (*model.ChatMessage, error)
	FindByPage(offset int, limit int) (result []*model.ChatMessage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChatMessageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int64) (result *model.ChatMessage, err error)
}

// GetByID SELECT * FROM @@table WHERE id=@id
func (c chatMessageDo) GetByID(id int64) (result *model.ChatMessage, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM chat_message WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c chatMessageDo) Debug() IChatMessageDo {
	return c.withDO(c.DO.Debug())
}

func (c chatMessageDo) WithContext(ctx context.Context) IChatMessageDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chatMessageDo) ReadDB() IChatMessageDo {
	return c.Clauses(dbresolver.Read)
}

func (c chatMessageDo) WriteDB() IChatMessageDo {
	return c.Clauses(dbresolver.Write)
}

func (c chatMessageDo) Session(config *gorm.Session) IChatMessageDo {
	return c.withDO(c.DO.Session(config))
}

func (c chatMessageDo) Clauses(conds ...clause.Expression) IChatMessageDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chatMessageDo) Returning(value interface{}, columns ...string) IChatMessageDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chatMessageDo) Not(conds ...gen.Condition) IChatMessageDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chatMessageDo) Or(conds ...gen.Condition) IChatMessageDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chatMessageDo) Select(conds ...field.Expr) IChatMessageDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chatMessageDo) Where(conds ...gen.Condition) IChatMessageDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chatMessageDo) Order(conds ...field.Expr) IChatMessageDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chatMessageDo) Distinct(cols ...field.Expr) IChatMessageDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chatMessageDo) Omit(cols ...field.Expr) IChatMessageDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chatMessageDo) Join(table schema.Tabler, on ...field.Expr) IChatMessageDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chatMessageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChatMessageDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chatMessageDo) RightJoin(table schema.Tabler, on ...field.Expr) IChatMessageDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chatMessageDo) Group(cols ...field.Expr) IChatMessageDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chatMessageDo) Having(conds ...gen.Condition) IChatMessageDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chatMessageDo) Limit(limit int) IChatMessageDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chatMessageDo) Offset(offset int) IChatMessageDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chatMessageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChatMessageDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chatMessageDo) Unscoped() IChatMessageDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chatMessageDo) Create(values ...*model.ChatMessage) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chatMessageDo) CreateInBatches(values []*model.ChatMessage, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chatMessageDo) Save(values ...*model.ChatMessage) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chatMessageDo) First() (*model.ChatMessage, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatMessage), nil
	}
}

func (c chatMessageDo) Take() (*model.ChatMessage, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatMessage), nil
	}
}

func (c chatMessageDo) Last() (*model.ChatMessage, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatMessage), nil
	}
}

func (c chatMessageDo) Find() ([]*model.ChatMessage, error) {
	result, err := c.DO.Find()
	return result.([]*model.ChatMessage), err
}

func (c chatMessageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChatMessage, err error) {
	buf := make([]*model.ChatMessage, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chatMessageDo) FindInBatches(result *[]*model.ChatMessage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chatMessageDo) Attrs(attrs ...field.AssignExpr) IChatMessageDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chatMessageDo) Assign(attrs ...field.AssignExpr) IChatMessageDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chatMessageDo) Joins(fields ...field.RelationField) IChatMessageDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chatMessageDo) Preload(fields ...field.RelationField) IChatMessageDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chatMessageDo) FirstOrInit() (*model.ChatMessage, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatMessage), nil
	}
}

func (c chatMessageDo) FirstOrCreate() (*model.ChatMessage, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatMessage), nil
	}
}

func (c chatMessageDo) FindByPage(offset int, limit int) (result []*model.ChatMessage, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chatMessageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chatMessageDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chatMessageDo) Delete(models ...*model.ChatMessage) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chatMessageDo) withDO(do gen.Dao) *chatMessageDo {
	c.DO = *do.(*gen.DO)
	return c
}
