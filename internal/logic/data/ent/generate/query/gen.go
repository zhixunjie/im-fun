// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                   = new(Query)
	ChatContact         *chatContact
	ChatGroup           *chatGroup
	ChatGroupMessage    *chatGroupMessage
	ChatGroupMessageRef *chatGroupMessageRef
	ChatGroupUser       *chatGroupUser
	ChatIDCounter       *chatIDCounter
	ChatMessage         *chatMessage
	Robot               *robot
	User                *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	ChatContact = &Q.ChatContact
	ChatGroup = &Q.ChatGroup
	ChatGroupMessage = &Q.ChatGroupMessage
	ChatGroupMessageRef = &Q.ChatGroupMessageRef
	ChatGroupUser = &Q.ChatGroupUser
	ChatIDCounter = &Q.ChatIDCounter
	ChatMessage = &Q.ChatMessage
	Robot = &Q.Robot
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                  db,
		ChatContact:         newChatContact(db, opts...),
		ChatGroup:           newChatGroup(db, opts...),
		ChatGroupMessage:    newChatGroupMessage(db, opts...),
		ChatGroupMessageRef: newChatGroupMessageRef(db, opts...),
		ChatGroupUser:       newChatGroupUser(db, opts...),
		ChatIDCounter:       newChatIDCounter(db, opts...),
		ChatMessage:         newChatMessage(db, opts...),
		Robot:               newRobot(db, opts...),
		User:                newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	ChatContact         chatContact
	ChatGroup           chatGroup
	ChatGroupMessage    chatGroupMessage
	ChatGroupMessageRef chatGroupMessageRef
	ChatGroupUser       chatGroupUser
	ChatIDCounter       chatIDCounter
	ChatMessage         chatMessage
	Robot               robot
	User                user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		ChatContact:         q.ChatContact.clone(db),
		ChatGroup:           q.ChatGroup.clone(db),
		ChatGroupMessage:    q.ChatGroupMessage.clone(db),
		ChatGroupMessageRef: q.ChatGroupMessageRef.clone(db),
		ChatGroupUser:       q.ChatGroupUser.clone(db),
		ChatIDCounter:       q.ChatIDCounter.clone(db),
		ChatMessage:         q.ChatMessage.clone(db),
		Robot:               q.Robot.clone(db),
		User:                q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		ChatContact:         q.ChatContact.replaceDB(db),
		ChatGroup:           q.ChatGroup.replaceDB(db),
		ChatGroupMessage:    q.ChatGroupMessage.replaceDB(db),
		ChatGroupMessageRef: q.ChatGroupMessageRef.replaceDB(db),
		ChatGroupUser:       q.ChatGroupUser.replaceDB(db),
		ChatIDCounter:       q.ChatIDCounter.replaceDB(db),
		ChatMessage:         q.ChatMessage.replaceDB(db),
		Robot:               q.Robot.replaceDB(db),
		User:                q.User.replaceDB(db),
	}
}

type queryCtx struct {
	ChatContact         IChatContactDo
	ChatGroup           IChatGroupDo
	ChatGroupMessage    IChatGroupMessageDo
	ChatGroupMessageRef IChatGroupMessageRefDo
	ChatGroupUser       IChatGroupUserDo
	ChatIDCounter       IChatIDCounterDo
	ChatMessage         IChatMessageDo
	Robot               IRobotDo
	User                IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		ChatContact:         q.ChatContact.WithContext(ctx),
		ChatGroup:           q.ChatGroup.WithContext(ctx),
		ChatGroupMessage:    q.ChatGroupMessage.WithContext(ctx),
		ChatGroupMessageRef: q.ChatGroupMessageRef.WithContext(ctx),
		ChatGroupUser:       q.ChatGroupUser.WithContext(ctx),
		ChatIDCounter:       q.ChatIDCounter.WithContext(ctx),
		ChatMessage:         q.ChatMessage.WithContext(ctx),
		Robot:               q.Robot.WithContext(ctx),
		User:                q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
