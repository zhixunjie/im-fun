// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zhixunjie/im-fun/internal/logic/data/ent/generate/model"
)

func newRobot(db *gorm.DB, opts ...gen.DOOption) robot {
	_robot := robot{}

	_robot.robotDo.UseDB(db, opts...)
	_robot.robotDo.UseModel(&model.Robot{})

	tableName := _robot.robotDo.TableName()
	_robot.ALL = field.NewAsterisk(tableName)
	_robot.ID = field.NewUint64(tableName, "id")
	_robot.Name = field.NewString(tableName, "name")
	_robot.CreatedAt = field.NewTime(tableName, "created_at")
	_robot.UpdatedAt = field.NewTime(tableName, "updated_at")

	_robot.fillFieldMap()

	return _robot
}

// robot 机器人
type robot struct {
	robotDo

	ALL       field.Asterisk
	ID        field.Uint64 // 自增id,主键
	Name      field.String // 机器人的名称
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (r robot) Table(newTableName string) *robot {
	r.robotDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r robot) As(alias string) *robot {
	r.robotDo.DO = *(r.robotDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *robot) updateTableName(table string) *robot {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint64(table, "id")
	r.Name = field.NewString(table, "name")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *robot) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *robot) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 4)
	r.fieldMap["id"] = r.ID
	r.fieldMap["name"] = r.Name
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
}

func (r robot) clone(db *gorm.DB) robot {
	r.robotDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r robot) replaceDB(db *gorm.DB) robot {
	r.robotDo.ReplaceDB(db)
	return r
}

type robotDo struct{ gen.DO }

type IRobotDo interface {
	gen.SubQuery
	Debug() IRobotDo
	WithContext(ctx context.Context) IRobotDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRobotDo
	WriteDB() IRobotDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRobotDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRobotDo
	Not(conds ...gen.Condition) IRobotDo
	Or(conds ...gen.Condition) IRobotDo
	Select(conds ...field.Expr) IRobotDo
	Where(conds ...gen.Condition) IRobotDo
	Order(conds ...field.Expr) IRobotDo
	Distinct(cols ...field.Expr) IRobotDo
	Omit(cols ...field.Expr) IRobotDo
	Join(table schema.Tabler, on ...field.Expr) IRobotDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRobotDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRobotDo
	Group(cols ...field.Expr) IRobotDo
	Having(conds ...gen.Condition) IRobotDo
	Limit(limit int) IRobotDo
	Offset(offset int) IRobotDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRobotDo
	Unscoped() IRobotDo
	Create(values ...*model.Robot) error
	CreateInBatches(values []*model.Robot, batchSize int) error
	Save(values ...*model.Robot) error
	First() (*model.Robot, error)
	Take() (*model.Robot, error)
	Last() (*model.Robot, error)
	Find() ([]*model.Robot, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Robot, err error)
	FindInBatches(result *[]*model.Robot, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Robot) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRobotDo
	Assign(attrs ...field.AssignExpr) IRobotDo
	Joins(fields ...field.RelationField) IRobotDo
	Preload(fields ...field.RelationField) IRobotDo
	FirstOrInit() (*model.Robot, error)
	FirstOrCreate() (*model.Robot, error)
	FindByPage(offset int, limit int) (result []*model.Robot, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRobotDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int64) (result *model.Robot, err error)
}

// GetByID SELECT * FROM @@table WHERE id=@id
func (r robotDo) GetByID(id int64) (result *model.Robot, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM robot WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (r robotDo) Debug() IRobotDo {
	return r.withDO(r.DO.Debug())
}

func (r robotDo) WithContext(ctx context.Context) IRobotDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r robotDo) ReadDB() IRobotDo {
	return r.Clauses(dbresolver.Read)
}

func (r robotDo) WriteDB() IRobotDo {
	return r.Clauses(dbresolver.Write)
}

func (r robotDo) Session(config *gorm.Session) IRobotDo {
	return r.withDO(r.DO.Session(config))
}

func (r robotDo) Clauses(conds ...clause.Expression) IRobotDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r robotDo) Returning(value interface{}, columns ...string) IRobotDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r robotDo) Not(conds ...gen.Condition) IRobotDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r robotDo) Or(conds ...gen.Condition) IRobotDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r robotDo) Select(conds ...field.Expr) IRobotDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r robotDo) Where(conds ...gen.Condition) IRobotDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r robotDo) Order(conds ...field.Expr) IRobotDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r robotDo) Distinct(cols ...field.Expr) IRobotDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r robotDo) Omit(cols ...field.Expr) IRobotDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r robotDo) Join(table schema.Tabler, on ...field.Expr) IRobotDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r robotDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRobotDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r robotDo) RightJoin(table schema.Tabler, on ...field.Expr) IRobotDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r robotDo) Group(cols ...field.Expr) IRobotDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r robotDo) Having(conds ...gen.Condition) IRobotDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r robotDo) Limit(limit int) IRobotDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r robotDo) Offset(offset int) IRobotDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r robotDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRobotDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r robotDo) Unscoped() IRobotDo {
	return r.withDO(r.DO.Unscoped())
}

func (r robotDo) Create(values ...*model.Robot) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r robotDo) CreateInBatches(values []*model.Robot, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r robotDo) Save(values ...*model.Robot) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r robotDo) First() (*model.Robot, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Robot), nil
	}
}

func (r robotDo) Take() (*model.Robot, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Robot), nil
	}
}

func (r robotDo) Last() (*model.Robot, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Robot), nil
	}
}

func (r robotDo) Find() ([]*model.Robot, error) {
	result, err := r.DO.Find()
	return result.([]*model.Robot), err
}

func (r robotDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Robot, err error) {
	buf := make([]*model.Robot, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r robotDo) FindInBatches(result *[]*model.Robot, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r robotDo) Attrs(attrs ...field.AssignExpr) IRobotDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r robotDo) Assign(attrs ...field.AssignExpr) IRobotDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r robotDo) Joins(fields ...field.RelationField) IRobotDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r robotDo) Preload(fields ...field.RelationField) IRobotDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r robotDo) FirstOrInit() (*model.Robot, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Robot), nil
	}
}

func (r robotDo) FirstOrCreate() (*model.Robot, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Robot), nil
	}
}

func (r robotDo) FindByPage(offset int, limit int) (result []*model.Robot, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r robotDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r robotDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r robotDo) Delete(models ...*model.Robot) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *robotDo) withDO(do gen.Dao) *robotDo {
	r.DO = *do.(*gen.DO)
	return r
}
